package view

import (
	"fmt"
	"app/domain"
)

// ContactsPageData represents the data structure for the contacts page.
type ContactsPageData struct {
	Query       string
	Contacts    []domain.Contact
	CurrentPage int
	TotalPages  int
}

// toString converts ContactsPageData to a string representation.
func toString(data ContactsPageData) string {
	return fmt.Sprintf("%+v", data)
}

// ActionComponent is a template for rendering actions for a contact.

templ ActionComponent(c domain.Contact) {
	<td>
		@GetButton(fmt.Sprintf("/contacts/%d/edit", c.ID),"Edit","body","","btn")
		@GetButton(fmt.Sprintf("/contacts/%d/view", c.ID),"View","body","","btn")
	</td>
}

// fmt.Sprintf("/contacts/%d/edit", c.ID)

templ GetPageButton(url string, name string, target string,class string) {
	<a class={ class } hx-get={ url } hx-push-url="true" hx-target={ target } hx-swap="outerHTML">
		{ name }
	</a>
}

// ContactTable is a template for rendering a contact as a table row.

templ ContactTableRow(contact domain.Contact) {
	<tr>
		<td class="contact-id">{ fmt.Sprint(contact.ID) }</td>
		<td class="first-name">{ contact.FirstName }</td>
		<td class="last-name">{ contact.LastName }</td>
		<td class="phone">{ contact.Phone }</td>
		<td class="email">{ contact.Email }</td>
		@ActionComponent(contact)
	</tr>
}

templ ContactsPageBody(c context.Context, data ContactsPageData) {
	<div id="main">
		<table class="contacts-table">
			<tbody>
				for _, contact := range data.Contacts {
					@ContactTableRow(contact)
				}
			</tbody>
		</table>
		<div>
			<span style="float: center">
				if  data.CurrentPage > 1 {
					@GetButton(fmt.Sprintf("/contacts?page=%d", data.CurrentPage-1),"Previous","#main","","btn")
				}
				if len(data.Contacts) == 10 {
					@GetButton(fmt.Sprintf("/contacts?page=%d", data.CurrentPage+1),"Next","#main","","btn")
				}
			</span>
		</div>
	</div>
}
